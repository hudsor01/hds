/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, waitlist_attempts } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatewaitlist_attempts(options?: Omit<(UseMutationOptions<(waitlist_attempts | undefined), DefaultError, Prisma.waitlist_attemptsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsCreateArgs, DefaultError, waitlist_attempts, true>('waitlist_attempts', 'POST', `${endpoint}/waitlist_attempts/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManywaitlist_attempts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.waitlist_attemptsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('waitlist_attempts', 'POST', `${endpoint}/waitlist_attempts/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindManyArgs, TQueryFnData = Array<Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findMany`, args, options, fetch);
}

export function useInfiniteFindManywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindManyArgs, TQueryFnData = Array<Prisma.waitlist_attemptsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findMany`, args, options, fetch);
}

export function useSuspenseFindManywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindManyArgs, TQueryFnData = Array<Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindManyArgs, TQueryFnData = Array<Prisma.waitlist_attemptsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findMany`, args, options, fetch);
}

export function useFindUniquewaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindUniqueArgs, TQueryFnData = Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquewaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindUniqueArgs, TQueryFnData = Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findUnique`, args, options, fetch);
}

export function useFindFirstwaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindFirstArgs, TQueryFnData = Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstwaitlist_attempts<TArgs extends Prisma.waitlist_attemptsFindFirstArgs, TQueryFnData = Prisma.waitlist_attemptsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/findFirst`, args, options, fetch);
}

export function useUpdatewaitlist_attempts(options?: Omit<(UseMutationOptions<(waitlist_attempts | undefined), DefaultError, Prisma.waitlist_attemptsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsUpdateArgs, DefaultError, waitlist_attempts, true>('waitlist_attempts', 'PUT', `${endpoint}/waitlist_attempts/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManywaitlist_attempts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.waitlist_attemptsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('waitlist_attempts', 'PUT', `${endpoint}/waitlist_attempts/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertwaitlist_attempts(options?: Omit<(UseMutationOptions<(waitlist_attempts | undefined), DefaultError, Prisma.waitlist_attemptsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsUpsertArgs, DefaultError, waitlist_attempts, true>('waitlist_attempts', 'POST', `${endpoint}/waitlist_attempts/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletewaitlist_attempts(options?: Omit<(UseMutationOptions<(waitlist_attempts | undefined), DefaultError, Prisma.waitlist_attemptsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsDeleteArgs, DefaultError, waitlist_attempts, true>('waitlist_attempts', 'DELETE', `${endpoint}/waitlist_attempts/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, waitlist_attempts, Prisma.waitlist_attemptsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManywaitlist_attempts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.waitlist_attemptsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.waitlist_attemptsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('waitlist_attempts', 'DELETE', `${endpoint}/waitlist_attempts/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.waitlist_attemptsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.waitlist_attemptsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.waitlist_attemptsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWaitlist_attempts<TArgs extends Prisma.Waitlist_attemptsAggregateArgs, TQueryFnData = Prisma.GetWaitlist_attemptsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Waitlist_attemptsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Waitlist_attempts', `${endpoint}/waitlist_attempts/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWaitlist_attempts<TArgs extends Prisma.Waitlist_attemptsAggregateArgs, TQueryFnData = Prisma.GetWaitlist_attemptsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Waitlist_attemptsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Waitlist_attempts', `${endpoint}/waitlist_attempts/aggregate`, args, options, fetch);
}

export function useGroupBywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.waitlist_attemptsGroupByArgs['orderBy'] } : { orderBy?: Prisma.waitlist_attemptsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Waitlist_attemptsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Waitlist_attemptsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Waitlist_attemptsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Waitlist_attemptsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.waitlist_attemptsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBywaitlist_attempts<TArgs extends Prisma.waitlist_attemptsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.waitlist_attemptsGroupByArgs['orderBy'] } : { orderBy?: Prisma.waitlist_attemptsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Waitlist_attemptsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Waitlist_attemptsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Waitlist_attemptsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Waitlist_attemptsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.waitlist_attemptsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/groupBy`, args, options, fetch);
}

export function useCountwaitlist_attempts<TArgs extends Prisma.waitlist_attemptsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Waitlist_attemptsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/count`, args, options, fetch);
}

export function useSuspenseCountwaitlist_attempts<TArgs extends Prisma.waitlist_attemptsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Waitlist_attemptsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.waitlist_attemptsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/count`, args, options, fetch);
}

export function useCheckwaitlist_attempts<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; identifier?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('waitlist_attempts', `${endpoint}/waitlist_attempts/check`, args, options, fetch);
}
