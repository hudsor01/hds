/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, user_security_settings } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateuser_security_settings(options?: Omit<(UseMutationOptions<(user_security_settings | undefined), DefaultError, Prisma.user_security_settingsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsCreateArgs, DefaultError, user_security_settings, true>('user_security_settings', 'POST', `${endpoint}/user_security_settings/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyuser_security_settings(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_security_settingsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('user_security_settings', 'POST', `${endpoint}/user_security_settings/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyuser_security_settings<TArgs extends Prisma.user_security_settingsFindManyArgs, TQueryFnData = Array<Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findMany`, args, options, fetch);
}

export function useInfiniteFindManyuser_security_settings<TArgs extends Prisma.user_security_settingsFindManyArgs, TQueryFnData = Array<Prisma.user_security_settingsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findMany`, args, options, fetch);
}

export function useSuspenseFindManyuser_security_settings<TArgs extends Prisma.user_security_settingsFindManyArgs, TQueryFnData = Array<Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyuser_security_settings<TArgs extends Prisma.user_security_settingsFindManyArgs, TQueryFnData = Array<Prisma.user_security_settingsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findMany`, args, options, fetch);
}

export function useFindUniqueuser_security_settings<TArgs extends Prisma.user_security_settingsFindUniqueArgs, TQueryFnData = Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueuser_security_settings<TArgs extends Prisma.user_security_settingsFindUniqueArgs, TQueryFnData = Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findUnique`, args, options, fetch);
}

export function useFindFirstuser_security_settings<TArgs extends Prisma.user_security_settingsFindFirstArgs, TQueryFnData = Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstuser_security_settings<TArgs extends Prisma.user_security_settingsFindFirstArgs, TQueryFnData = Prisma.user_security_settingsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/findFirst`, args, options, fetch);
}

export function useUpdateuser_security_settings(options?: Omit<(UseMutationOptions<(user_security_settings | undefined), DefaultError, Prisma.user_security_settingsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsUpdateArgs, DefaultError, user_security_settings, true>('user_security_settings', 'PUT', `${endpoint}/user_security_settings/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyuser_security_settings(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_security_settingsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('user_security_settings', 'PUT', `${endpoint}/user_security_settings/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertuser_security_settings(options?: Omit<(UseMutationOptions<(user_security_settings | undefined), DefaultError, Prisma.user_security_settingsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsUpsertArgs, DefaultError, user_security_settings, true>('user_security_settings', 'POST', `${endpoint}/user_security_settings/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteuser_security_settings(options?: Omit<(UseMutationOptions<(user_security_settings | undefined), DefaultError, Prisma.user_security_settingsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsDeleteArgs, DefaultError, user_security_settings, true>('user_security_settings', 'DELETE', `${endpoint}/user_security_settings/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_security_settings, Prisma.user_security_settingsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyuser_security_settings(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_security_settingsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_security_settingsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('user_security_settings', 'DELETE', `${endpoint}/user_security_settings/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_security_settingsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_security_settingsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_security_settingsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUser_security_settings<TArgs extends Prisma.User_security_settingsAggregateArgs, TQueryFnData = Prisma.GetUser_security_settingsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.User_security_settingsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('User_security_settings', `${endpoint}/user_security_settings/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateUser_security_settings<TArgs extends Prisma.User_security_settingsAggregateArgs, TQueryFnData = Prisma.GetUser_security_settingsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.User_security_settingsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('User_security_settings', `${endpoint}/user_security_settings/aggregate`, args, options, fetch);
}

export function useGroupByuser_security_settings<TArgs extends Prisma.user_security_settingsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.user_security_settingsGroupByArgs['orderBy'] } : { orderBy?: Prisma.user_security_settingsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.User_security_settingsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.User_security_settingsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.User_security_settingsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.User_security_settingsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.user_security_settingsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByuser_security_settings<TArgs extends Prisma.user_security_settingsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.user_security_settingsGroupByArgs['orderBy'] } : { orderBy?: Prisma.user_security_settingsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.User_security_settingsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.User_security_settingsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.User_security_settingsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.User_security_settingsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.user_security_settingsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/groupBy`, args, options, fetch);
}

export function useCountuser_security_settings<TArgs extends Prisma.user_security_settingsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.User_security_settingsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/count`, args, options, fetch);
}

export function useSuspenseCountuser_security_settings<TArgs extends Prisma.user_security_settingsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.User_security_settingsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_security_settingsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_security_settings', `${endpoint}/user_security_settings/count`, args, options, fetch);
}

export function useCheckuser_security_settings<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { user_id?: string; two_factor_enabled?: boolean; two_factor_method?: string; backup_codes?: string; allowed_ips?: string; max_sessions?: number; require_password_change?: boolean; login_notifications?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('user_security_settings', `${endpoint}/user_security_settings/check`, args, options, fetch);
}
