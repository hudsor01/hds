/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, work_orders } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatework_orders(options?: Omit<(UseMutationOptions<(work_orders | undefined), DefaultError, Prisma.work_ordersCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersCreateArgs, DefaultError, work_orders, true>('work_orders', 'POST', `${endpoint}/work_orders/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManywork_orders(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.work_ordersCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('work_orders', 'POST', `${endpoint}/work_orders/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManywork_orders<TArgs extends Prisma.work_ordersFindManyArgs, TQueryFnData = Array<Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findMany`, args, options, fetch);
}

export function useInfiniteFindManywork_orders<TArgs extends Prisma.work_ordersFindManyArgs, TQueryFnData = Array<Prisma.work_ordersGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findMany`, args, options, fetch);
}

export function useSuspenseFindManywork_orders<TArgs extends Prisma.work_ordersFindManyArgs, TQueryFnData = Array<Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManywork_orders<TArgs extends Prisma.work_ordersFindManyArgs, TQueryFnData = Array<Prisma.work_ordersGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findMany`, args, options, fetch);
}

export function useFindUniquework_orders<TArgs extends Prisma.work_ordersFindUniqueArgs, TQueryFnData = Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquework_orders<TArgs extends Prisma.work_ordersFindUniqueArgs, TQueryFnData = Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findUnique`, args, options, fetch);
}

export function useFindFirstwork_orders<TArgs extends Prisma.work_ordersFindFirstArgs, TQueryFnData = Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstwork_orders<TArgs extends Prisma.work_ordersFindFirstArgs, TQueryFnData = Prisma.work_ordersGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/findFirst`, args, options, fetch);
}

export function useUpdatework_orders(options?: Omit<(UseMutationOptions<(work_orders | undefined), DefaultError, Prisma.work_ordersUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersUpdateArgs, DefaultError, work_orders, true>('work_orders', 'PUT', `${endpoint}/work_orders/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManywork_orders(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.work_ordersUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('work_orders', 'PUT', `${endpoint}/work_orders/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertwork_orders(options?: Omit<(UseMutationOptions<(work_orders | undefined), DefaultError, Prisma.work_ordersUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersUpsertArgs, DefaultError, work_orders, true>('work_orders', 'POST', `${endpoint}/work_orders/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletework_orders(options?: Omit<(UseMutationOptions<(work_orders | undefined), DefaultError, Prisma.work_ordersDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersDeleteArgs, DefaultError, work_orders, true>('work_orders', 'DELETE', `${endpoint}/work_orders/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, work_orders, Prisma.work_ordersGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManywork_orders(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.work_ordersDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.work_ordersDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('work_orders', 'DELETE', `${endpoint}/work_orders/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.work_ordersDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.work_ordersDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.work_ordersDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWork_orders<TArgs extends Prisma.Work_ordersAggregateArgs, TQueryFnData = Prisma.GetWork_ordersAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Work_ordersAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Work_orders', `${endpoint}/work_orders/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWork_orders<TArgs extends Prisma.Work_ordersAggregateArgs, TQueryFnData = Prisma.GetWork_ordersAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Work_ordersAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Work_orders', `${endpoint}/work_orders/aggregate`, args, options, fetch);
}

export function useGroupBywork_orders<TArgs extends Prisma.work_ordersGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.work_ordersGroupByArgs['orderBy'] } : { orderBy?: Prisma.work_ordersGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Work_ordersGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Work_ordersGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Work_ordersGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Work_ordersGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.work_ordersGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBywork_orders<TArgs extends Prisma.work_ordersGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.work_ordersGroupByArgs['orderBy'] } : { orderBy?: Prisma.work_ordersGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Work_ordersGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Work_ordersGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Work_ordersGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Work_ordersGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.work_ordersGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/groupBy`, args, options, fetch);
}

export function useCountwork_orders<TArgs extends Prisma.work_ordersCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Work_ordersCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/count`, args, options, fetch);
}

export function useSuspenseCountwork_orders<TArgs extends Prisma.work_ordersCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Work_ordersCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.work_ordersCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('work_orders', `${endpoint}/work_orders/count`, args, options, fetch);
}

export function useCheckwork_orders<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; vendor_id?: string; property_id?: string; maintenance_id?: string; title?: string; description?: string; priority?: string; status?: string; notes?: string; user_id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('work_orders', `${endpoint}/work_orders/check`, args, options, fetch);
}
