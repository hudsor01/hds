/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, security_audit_log } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatesecurity_audit_log(options?: Omit<(UseMutationOptions<(security_audit_log | undefined), DefaultError, Prisma.security_audit_logCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logCreateArgs, DefaultError, security_audit_log, true>('security_audit_log', 'POST', `${endpoint}/security_audit_log/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManysecurity_audit_log(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.security_audit_logCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('security_audit_log', 'POST', `${endpoint}/security_audit_log/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManysecurity_audit_log<TArgs extends Prisma.security_audit_logFindManyArgs, TQueryFnData = Array<Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findMany`, args, options, fetch);
}

export function useInfiniteFindManysecurity_audit_log<TArgs extends Prisma.security_audit_logFindManyArgs, TQueryFnData = Array<Prisma.security_audit_logGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findMany`, args, options, fetch);
}

export function useSuspenseFindManysecurity_audit_log<TArgs extends Prisma.security_audit_logFindManyArgs, TQueryFnData = Array<Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManysecurity_audit_log<TArgs extends Prisma.security_audit_logFindManyArgs, TQueryFnData = Array<Prisma.security_audit_logGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findMany`, args, options, fetch);
}

export function useFindUniquesecurity_audit_log<TArgs extends Prisma.security_audit_logFindUniqueArgs, TQueryFnData = Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquesecurity_audit_log<TArgs extends Prisma.security_audit_logFindUniqueArgs, TQueryFnData = Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findUnique`, args, options, fetch);
}

export function useFindFirstsecurity_audit_log<TArgs extends Prisma.security_audit_logFindFirstArgs, TQueryFnData = Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstsecurity_audit_log<TArgs extends Prisma.security_audit_logFindFirstArgs, TQueryFnData = Prisma.security_audit_logGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/findFirst`, args, options, fetch);
}

export function useUpdatesecurity_audit_log(options?: Omit<(UseMutationOptions<(security_audit_log | undefined), DefaultError, Prisma.security_audit_logUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logUpdateArgs, DefaultError, security_audit_log, true>('security_audit_log', 'PUT', `${endpoint}/security_audit_log/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManysecurity_audit_log(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.security_audit_logUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('security_audit_log', 'PUT', `${endpoint}/security_audit_log/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertsecurity_audit_log(options?: Omit<(UseMutationOptions<(security_audit_log | undefined), DefaultError, Prisma.security_audit_logUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logUpsertArgs, DefaultError, security_audit_log, true>('security_audit_log', 'POST', `${endpoint}/security_audit_log/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletesecurity_audit_log(options?: Omit<(UseMutationOptions<(security_audit_log | undefined), DefaultError, Prisma.security_audit_logDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logDeleteArgs, DefaultError, security_audit_log, true>('security_audit_log', 'DELETE', `${endpoint}/security_audit_log/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, security_audit_log, Prisma.security_audit_logGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManysecurity_audit_log(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.security_audit_logDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.security_audit_logDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('security_audit_log', 'DELETE', `${endpoint}/security_audit_log/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.security_audit_logDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.security_audit_logDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.security_audit_logDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSecurity_audit_log<TArgs extends Prisma.Security_audit_logAggregateArgs, TQueryFnData = Prisma.GetSecurity_audit_logAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Security_audit_logAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Security_audit_log', `${endpoint}/security_audit_log/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSecurity_audit_log<TArgs extends Prisma.Security_audit_logAggregateArgs, TQueryFnData = Prisma.GetSecurity_audit_logAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Security_audit_logAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Security_audit_log', `${endpoint}/security_audit_log/aggregate`, args, options, fetch);
}

export function useGroupBysecurity_audit_log<TArgs extends Prisma.security_audit_logGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.security_audit_logGroupByArgs['orderBy'] } : { orderBy?: Prisma.security_audit_logGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Security_audit_logGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Security_audit_logGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Security_audit_logGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Security_audit_logGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.security_audit_logGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBysecurity_audit_log<TArgs extends Prisma.security_audit_logGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.security_audit_logGroupByArgs['orderBy'] } : { orderBy?: Prisma.security_audit_logGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Security_audit_logGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Security_audit_logGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Security_audit_logGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Security_audit_logGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.security_audit_logGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/groupBy`, args, options, fetch);
}

export function useCountsecurity_audit_log<TArgs extends Prisma.security_audit_logCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Security_audit_logCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/count`, args, options, fetch);
}

export function useSuspenseCountsecurity_audit_log<TArgs extends Prisma.security_audit_logCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Security_audit_logCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.security_audit_logCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('security_audit_log', `${endpoint}/security_audit_log/count`, args, options, fetch);
}

export function useChecksecurity_audit_log<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; user_id?: string; event_type?: string; resource_type?: string; resource_id?: string; ip_address?: string; user_agent?: string; severity?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('security_audit_log', `${endpoint}/security_audit_log/check`, args, options, fetch);
}
