/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, maintenance_requests } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatemaintenance_requests(options?: Omit<(UseMutationOptions<(maintenance_requests | undefined), DefaultError, Prisma.maintenance_requestsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsCreateArgs, DefaultError, maintenance_requests, true>('maintenance_requests', 'POST', `${endpoint}/maintenance_requests/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManymaintenance_requests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.maintenance_requestsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('maintenance_requests', 'POST', `${endpoint}/maintenance_requests/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManymaintenance_requests<TArgs extends Prisma.maintenance_requestsFindManyArgs, TQueryFnData = Array<Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findMany`, args, options, fetch);
}

export function useInfiniteFindManymaintenance_requests<TArgs extends Prisma.maintenance_requestsFindManyArgs, TQueryFnData = Array<Prisma.maintenance_requestsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findMany`, args, options, fetch);
}

export function useSuspenseFindManymaintenance_requests<TArgs extends Prisma.maintenance_requestsFindManyArgs, TQueryFnData = Array<Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManymaintenance_requests<TArgs extends Prisma.maintenance_requestsFindManyArgs, TQueryFnData = Array<Prisma.maintenance_requestsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findMany`, args, options, fetch);
}

export function useFindUniquemaintenance_requests<TArgs extends Prisma.maintenance_requestsFindUniqueArgs, TQueryFnData = Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquemaintenance_requests<TArgs extends Prisma.maintenance_requestsFindUniqueArgs, TQueryFnData = Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findUnique`, args, options, fetch);
}

export function useFindFirstmaintenance_requests<TArgs extends Prisma.maintenance_requestsFindFirstArgs, TQueryFnData = Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstmaintenance_requests<TArgs extends Prisma.maintenance_requestsFindFirstArgs, TQueryFnData = Prisma.maintenance_requestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/findFirst`, args, options, fetch);
}

export function useUpdatemaintenance_requests(options?: Omit<(UseMutationOptions<(maintenance_requests | undefined), DefaultError, Prisma.maintenance_requestsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsUpdateArgs, DefaultError, maintenance_requests, true>('maintenance_requests', 'PUT', `${endpoint}/maintenance_requests/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManymaintenance_requests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.maintenance_requestsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('maintenance_requests', 'PUT', `${endpoint}/maintenance_requests/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertmaintenance_requests(options?: Omit<(UseMutationOptions<(maintenance_requests | undefined), DefaultError, Prisma.maintenance_requestsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsUpsertArgs, DefaultError, maintenance_requests, true>('maintenance_requests', 'POST', `${endpoint}/maintenance_requests/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletemaintenance_requests(options?: Omit<(UseMutationOptions<(maintenance_requests | undefined), DefaultError, Prisma.maintenance_requestsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsDeleteArgs, DefaultError, maintenance_requests, true>('maintenance_requests', 'DELETE', `${endpoint}/maintenance_requests/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, maintenance_requests, Prisma.maintenance_requestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManymaintenance_requests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.maintenance_requestsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.maintenance_requestsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('maintenance_requests', 'DELETE', `${endpoint}/maintenance_requests/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.maintenance_requestsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.maintenance_requestsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.maintenance_requestsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMaintenance_requests<TArgs extends Prisma.Maintenance_requestsAggregateArgs, TQueryFnData = Prisma.GetMaintenance_requestsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Maintenance_requestsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Maintenance_requests', `${endpoint}/maintenance_requests/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMaintenance_requests<TArgs extends Prisma.Maintenance_requestsAggregateArgs, TQueryFnData = Prisma.GetMaintenance_requestsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Maintenance_requestsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Maintenance_requests', `${endpoint}/maintenance_requests/aggregate`, args, options, fetch);
}

export function useGroupBymaintenance_requests<TArgs extends Prisma.maintenance_requestsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.maintenance_requestsGroupByArgs['orderBy'] } : { orderBy?: Prisma.maintenance_requestsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Maintenance_requestsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Maintenance_requestsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Maintenance_requestsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Maintenance_requestsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.maintenance_requestsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBymaintenance_requests<TArgs extends Prisma.maintenance_requestsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.maintenance_requestsGroupByArgs['orderBy'] } : { orderBy?: Prisma.maintenance_requestsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Maintenance_requestsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Maintenance_requestsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Maintenance_requestsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Maintenance_requestsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.maintenance_requestsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/groupBy`, args, options, fetch);
}

export function useCountmaintenance_requests<TArgs extends Prisma.maintenance_requestsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Maintenance_requestsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/count`, args, options, fetch);
}

export function useSuspenseCountmaintenance_requests<TArgs extends Prisma.maintenance_requestsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Maintenance_requestsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.maintenance_requestsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('maintenance_requests', `${endpoint}/maintenance_requests/count`, args, options, fetch);
}

export function useCheckmaintenance_requests<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; description?: string; priority?: string; property_id?: string; user_id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('maintenance_requests', `${endpoint}/maintenance_requests/check`, args, options, fetch);
}
