/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, user_activity_logs } from '@prisma/client'
import type {
    UseMutationOptions,
    UseQueryOptions,
    UseInfiniteQueryOptions,
    InfiniteData
} from '@tanstack/react-query'
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react'
import {
    useModelQuery,
    useInfiniteModelQuery,
    useModelMutation
} from '@zenstackhq/tanstack-query/runtime-v5/react'
import type {
    PickEnumerable,
    CheckSelect,
    QueryError,
    ExtraQueryOptions,
    ExtraMutationOptions
} from '@zenstackhq/tanstack-query/runtime-v5'
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta'
type DefaultError = QueryError
import {
    useSuspenseModelQuery,
    useSuspenseInfiniteModelQuery
} from '@zenstackhq/tanstack-query/runtime-v5/react'
import type {
    UseSuspenseQueryOptions,
    UseSuspenseInfiniteQueryOptions
} from '@tanstack/react-query'

export function useCreateuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            user_activity_logs | undefined,
            DefaultError,
            Prisma.user_activity_logsCreateArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsCreateArgs,
        DefaultError,
        user_activity_logs,
        true
    >(
        'user_activity_logs',
        'POST',
        `${endpoint}/user_activity_logs/create`,
        metadata,
        options,
        fetch,
        true
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsCreateArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsCreateArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    | CheckSelect<
                          T,
                          user_activity_logs,
                          Prisma.user_activity_logsGetPayload<T>
                      >
                    | undefined,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsCreateArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as
                | CheckSelect<
                      T,
                      user_activity_logs,
                      Prisma.user_activity_logsGetPayload<T>
                  >
                | undefined
        }
    }
    return mutation
}

export function useCreateManyuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            Prisma.BatchPayload,
            DefaultError,
            Prisma.user_activity_logsCreateManyArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsCreateManyArgs,
        DefaultError,
        Prisma.BatchPayload,
        false
    >(
        'user_activity_logs',
        'POST',
        `${endpoint}/user_activity_logs/createMany`,
        metadata,
        options,
        fetch,
        false
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsCreateManyArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsCreateManyArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    Prisma.BatchPayload,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsCreateManyArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload
        }
    }
    return mutation
}

export function useFindManyuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindManyArgs,
    TQueryFnData = Array<
        Prisma.user_activity_logsGetPayload<TArgs> & {
            $optimistic?: boolean
        }
    >,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindManyArgs
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findMany`,
        args,
        options,
        fetch
    )
}

export function useInfiniteFindManyuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindManyArgs,
    TQueryFnData = Array<Prisma.user_activity_logsGetPayload<TArgs>>,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindManyArgs
    >,
    options?: Omit<
        UseInfiniteQueryOptions<
            TQueryFnData,
            TError,
            InfiniteData<TData>
        >,
        'queryKey' | 'initialPageParam'
    >
) {
    options = options ?? { getNextPageParam: () => null }
    const { endpoint, fetch } = getHooksContext()
    return useInfiniteModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findMany`,
        args,
        options,
        fetch
    )
}

export function useSuspenseFindManyuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindManyArgs,
    TQueryFnData = Array<
        Prisma.user_activity_logsGetPayload<TArgs> & {
            $optimistic?: boolean
        }
    >,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindManyArgs
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findMany`,
        args,
        options,
        fetch
    )
}

export function useSuspenseInfiniteFindManyuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindManyArgs,
    TQueryFnData = Array<Prisma.user_activity_logsGetPayload<TArgs>>,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindManyArgs
    >,
    options?: Omit<
        UseSuspenseInfiniteQueryOptions<
            TQueryFnData,
            TError,
            InfiniteData<TData>
        >,
        'queryKey' | 'initialPageParam'
    >
) {
    options = options ?? { getNextPageParam: () => null }
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findMany`,
        args,
        options,
        fetch
    )
}

export function useFindUniqueuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindUniqueArgs,
    TQueryFnData = Prisma.user_activity_logsGetPayload<TArgs> & {
        $optimistic?: boolean
    },
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindUniqueArgs
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findUnique`,
        args,
        options,
        fetch
    )
}

export function useSuspenseFindUniqueuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindUniqueArgs,
    TQueryFnData = Prisma.user_activity_logsGetPayload<TArgs> & {
        $optimistic?: boolean
    },
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindUniqueArgs
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findUnique`,
        args,
        options,
        fetch
    )
}

export function useFindFirstuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindFirstArgs,
    TQueryFnData = Prisma.user_activity_logsGetPayload<TArgs> & {
        $optimistic?: boolean
    },
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindFirstArgs
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findFirst`,
        args,
        options,
        fetch
    )
}

export function useSuspenseFindFirstuser_activity_logs<
    TArgs extends Prisma.user_activity_logsFindFirstArgs,
    TQueryFnData = Prisma.user_activity_logsGetPayload<TArgs> & {
        $optimistic?: boolean
    },
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsFindFirstArgs
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/findFirst`,
        args,
        options,
        fetch
    )
}

export function useUpdateuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            user_activity_logs | undefined,
            DefaultError,
            Prisma.user_activity_logsUpdateArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsUpdateArgs,
        DefaultError,
        user_activity_logs,
        true
    >(
        'user_activity_logs',
        'PUT',
        `${endpoint}/user_activity_logs/update`,
        metadata,
        options,
        fetch,
        true
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsUpdateArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsUpdateArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    | CheckSelect<
                          T,
                          user_activity_logs,
                          Prisma.user_activity_logsGetPayload<T>
                      >
                    | undefined,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsUpdateArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as
                | CheckSelect<
                      T,
                      user_activity_logs,
                      Prisma.user_activity_logsGetPayload<T>
                  >
                | undefined
        }
    }
    return mutation
}

export function useUpdateManyuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            Prisma.BatchPayload,
            DefaultError,
            Prisma.user_activity_logsUpdateManyArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsUpdateManyArgs,
        DefaultError,
        Prisma.BatchPayload,
        false
    >(
        'user_activity_logs',
        'PUT',
        `${endpoint}/user_activity_logs/updateMany`,
        metadata,
        options,
        fetch,
        false
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsUpdateManyArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsUpdateManyArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    Prisma.BatchPayload,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsUpdateManyArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload
        }
    }
    return mutation
}

export function useUpsertuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            user_activity_logs | undefined,
            DefaultError,
            Prisma.user_activity_logsUpsertArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsUpsertArgs,
        DefaultError,
        user_activity_logs,
        true
    >(
        'user_activity_logs',
        'POST',
        `${endpoint}/user_activity_logs/upsert`,
        metadata,
        options,
        fetch,
        true
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsUpsertArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsUpsertArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    | CheckSelect<
                          T,
                          user_activity_logs,
                          Prisma.user_activity_logsGetPayload<T>
                      >
                    | undefined,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsUpsertArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as
                | CheckSelect<
                      T,
                      user_activity_logs,
                      Prisma.user_activity_logsGetPayload<T>
                  >
                | undefined
        }
    }
    return mutation
}

export function useDeleteuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            user_activity_logs | undefined,
            DefaultError,
            Prisma.user_activity_logsDeleteArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsDeleteArgs,
        DefaultError,
        user_activity_logs,
        true
    >(
        'user_activity_logs',
        'DELETE',
        `${endpoint}/user_activity_logs/delete`,
        metadata,
        options,
        fetch,
        true
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsDeleteArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsDeleteArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    | CheckSelect<
                          T,
                          user_activity_logs,
                          Prisma.user_activity_logsGetPayload<T>
                      >
                    | undefined,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsDeleteArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as
                | CheckSelect<
                      T,
                      user_activity_logs,
                      Prisma.user_activity_logsGetPayload<T>
                  >
                | undefined
        }
    }
    return mutation
}

export function useDeleteManyuser_activity_logs(
    options?: Omit<
        UseMutationOptions<
            Prisma.BatchPayload,
            DefaultError,
            Prisma.user_activity_logsDeleteManyArgs
        > &
            ExtraMutationOptions,
        'mutationFn'
    >
) {
    const { endpoint, fetch } = getHooksContext()
    const _mutation = useModelMutation<
        Prisma.user_activity_logsDeleteManyArgs,
        DefaultError,
        Prisma.BatchPayload,
        false
    >(
        'user_activity_logs',
        'DELETE',
        `${endpoint}/user_activity_logs/deleteMany`,
        metadata,
        options,
        fetch,
        false
    )
    const mutation = {
        ..._mutation,
        mutateAsync: async <
            T extends Prisma.user_activity_logsDeleteManyArgs
        >(
            args: Prisma.SelectSubset<
                T,
                Prisma.user_activity_logsDeleteManyArgs
            >,
            options?: Omit<
                UseMutationOptions<
                    Prisma.BatchPayload,
                    DefaultError,
                    Prisma.SelectSubset<
                        T,
                        Prisma.user_activity_logsDeleteManyArgs
                    >
                > &
                    ExtraMutationOptions,
                'mutationFn'
            >
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload
        }
    }
    return mutation
}

export function useAggregateUser_activity_logs<
    TArgs extends Prisma.User_activity_logsAggregateArgs,
    TQueryFnData = Prisma.GetUser_activity_logsAggregateType<TArgs>,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.User_activity_logsAggregateArgs
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'User_activity_logs',
        `${endpoint}/user_activity_logs/aggregate`,
        args,
        options,
        fetch
    )
}

export function useSuspenseAggregateUser_activity_logs<
    TArgs extends Prisma.User_activity_logsAggregateArgs,
    TQueryFnData = Prisma.GetUser_activity_logsAggregateType<TArgs>,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.User_activity_logsAggregateArgs
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'User_activity_logs',
        `${endpoint}/user_activity_logs/aggregate`,
        args,
        options,
        fetch
    )
}

export function useGroupByuser_activity_logs<
    TArgs extends Prisma.user_activity_logsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
        Prisma.Extends<'skip', Prisma.Keys<TArgs>>,
        Prisma.Extends<'take', Prisma.Keys<TArgs>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
        ? { orderBy: Prisma.user_activity_logsGroupByArgs['orderBy'] }
        : {
              orderBy?: Prisma.user_activity_logsGroupByArgs['orderBy']
          },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
        Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<TArgs['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends TArgs['by'] extends never[]
        ? Prisma.True
        : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
        ? `Error: "by" must not be empty.`
        : HavingValid extends Prisma.False
          ? {
                [P in HavingFields]: P extends ByFields
                    ? never
                    : P extends string
                      ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                      : [
                            Error,
                            'Field ',
                            P,
                            ` in "having" needs to be provided in "by"`
                        ]
            }[HavingFields]
          : 'take' extends Prisma.Keys<TArgs>
            ? 'orderBy' extends Prisma.Keys<TArgs>
                ? ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                      }[OrderFields]
                : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Prisma.Keys<TArgs>
              ? 'orderBy' extends Prisma.Keys<TArgs>
                  ? ByValid extends Prisma.True
                      ? {}
                      : {
                            [P in OrderFields]: P extends ByFields
                                ? never
                                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                        }[OrderFields]
                  : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends Prisma.True
                ? {}
                : {
                      [P in OrderFields]: P extends ByFields
                          ? never
                          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields],
    TQueryFnData = {} extends InputErrors
        ? Array<
              PickEnumerable<
                  Prisma.User_activity_logsGroupByOutputType,
                  TArgs['by']
              > & {
                  [P in keyof TArgs &
                      keyof Prisma.User_activity_logsGroupByOutputType]: P extends '_count'
                      ? TArgs[P] extends boolean
                          ? number
                          : Prisma.GetScalarType<
                                TArgs[P],
                                Prisma.User_activity_logsGroupByOutputType[P]
                            >
                      : Prisma.GetScalarType<
                            TArgs[P],
                            Prisma.User_activity_logsGroupByOutputType[P]
                        >
              }
          >
        : InputErrors,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.SubsetIntersection<
            TArgs,
            Prisma.user_activity_logsGroupByArgs,
            OrderByArg
        > &
            InputErrors
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/groupBy`,
        args,
        options,
        fetch
    )
}

export function useSuspenseGroupByuser_activity_logs<
    TArgs extends Prisma.user_activity_logsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
        Prisma.Extends<'skip', Prisma.Keys<TArgs>>,
        Prisma.Extends<'take', Prisma.Keys<TArgs>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
        ? { orderBy: Prisma.user_activity_logsGroupByArgs['orderBy'] }
        : {
              orderBy?: Prisma.user_activity_logsGroupByArgs['orderBy']
          },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
        Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<TArgs['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends TArgs['by'] extends never[]
        ? Prisma.True
        : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
        ? `Error: "by" must not be empty.`
        : HavingValid extends Prisma.False
          ? {
                [P in HavingFields]: P extends ByFields
                    ? never
                    : P extends string
                      ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                      : [
                            Error,
                            'Field ',
                            P,
                            ` in "having" needs to be provided in "by"`
                        ]
            }[HavingFields]
          : 'take' extends Prisma.Keys<TArgs>
            ? 'orderBy' extends Prisma.Keys<TArgs>
                ? ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                      }[OrderFields]
                : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Prisma.Keys<TArgs>
              ? 'orderBy' extends Prisma.Keys<TArgs>
                  ? ByValid extends Prisma.True
                      ? {}
                      : {
                            [P in OrderFields]: P extends ByFields
                                ? never
                                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                        }[OrderFields]
                  : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends Prisma.True
                ? {}
                : {
                      [P in OrderFields]: P extends ByFields
                          ? never
                          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields],
    TQueryFnData = {} extends InputErrors
        ? Array<
              PickEnumerable<
                  Prisma.User_activity_logsGroupByOutputType,
                  TArgs['by']
              > & {
                  [P in keyof TArgs &
                      keyof Prisma.User_activity_logsGroupByOutputType]: P extends '_count'
                      ? TArgs[P] extends boolean
                          ? number
                          : Prisma.GetScalarType<
                                TArgs[P],
                                Prisma.User_activity_logsGroupByOutputType[P]
                            >
                      : Prisma.GetScalarType<
                            TArgs[P],
                            Prisma.User_activity_logsGroupByOutputType[P]
                        >
              }
          >
        : InputErrors,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args: Prisma.SelectSubset<
        TArgs,
        Prisma.SubsetIntersection<
            TArgs,
            Prisma.user_activity_logsGroupByArgs,
            OrderByArg
        > &
            InputErrors
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/groupBy`,
        args,
        options,
        fetch
    )
}

export function useCountuser_activity_logs<
    TArgs extends Prisma.user_activity_logsCountArgs,
    TQueryFnData = TArgs extends { select: any }
        ? TArgs['select'] extends true
            ? number
            : Prisma.GetScalarType<
                  TArgs['select'],
                  Prisma.User_activity_logsCountAggregateOutputType
              >
        : number,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsCountArgs
    >,
    options?: Omit<
        UseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/count`,
        args,
        options,
        fetch
    )
}

export function useSuspenseCountuser_activity_logs<
    TArgs extends Prisma.user_activity_logsCountArgs,
    TQueryFnData = TArgs extends { select: any }
        ? TArgs['select'] extends true
            ? number
            : Prisma.GetScalarType<
                  TArgs['select'],
                  Prisma.User_activity_logsCountAggregateOutputType
              >
        : number,
    TData = TQueryFnData,
    TError = DefaultError
>(
    args?: Prisma.SelectSubset<
        TArgs,
        Prisma.user_activity_logsCountArgs
    >,
    options?: Omit<
        UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useSuspenseModelQuery<TQueryFnData, TData, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/count`,
        args,
        options,
        fetch
    )
}

export function useCheckuser_activity_logs<TError = DefaultError>(
    args: {
        operation: PolicyCrudKind
        where?: {
            id?: string
            user_id?: string
            action?: string
            entity?: string
            entity_id?: string
            ip_address?: string
            user_agent?: string
        }
    },
    options?: Omit<
        UseQueryOptions<boolean, TError, boolean>,
        'queryKey'
    > &
        ExtraQueryOptions
) {
    const { endpoint, fetch } = getHooksContext()
    return useModelQuery<boolean, boolean, TError>(
        'user_activity_logs',
        `${endpoint}/user_activity_logs/check`,
        args,
        options,
        fetch
    )
}
