/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, public_audit_logs } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatepublic_audit_logs(options?: Omit<(UseMutationOptions<(public_audit_logs | undefined), DefaultError, Prisma.public_audit_logsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsCreateArgs, DefaultError, public_audit_logs, true>('public_audit_logs', 'POST', `${endpoint}/public_audit_logs/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManypublic_audit_logs(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.public_audit_logsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('public_audit_logs', 'POST', `${endpoint}/public_audit_logs/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManypublic_audit_logs<TArgs extends Prisma.public_audit_logsFindManyArgs, TQueryFnData = Array<Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findMany`, args, options, fetch);
}

export function useInfiniteFindManypublic_audit_logs<TArgs extends Prisma.public_audit_logsFindManyArgs, TQueryFnData = Array<Prisma.public_audit_logsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findMany`, args, options, fetch);
}

export function useSuspenseFindManypublic_audit_logs<TArgs extends Prisma.public_audit_logsFindManyArgs, TQueryFnData = Array<Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManypublic_audit_logs<TArgs extends Prisma.public_audit_logsFindManyArgs, TQueryFnData = Array<Prisma.public_audit_logsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findMany`, args, options, fetch);
}

export function useFindUniquepublic_audit_logs<TArgs extends Prisma.public_audit_logsFindUniqueArgs, TQueryFnData = Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquepublic_audit_logs<TArgs extends Prisma.public_audit_logsFindUniqueArgs, TQueryFnData = Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findUnique`, args, options, fetch);
}

export function useFindFirstpublic_audit_logs<TArgs extends Prisma.public_audit_logsFindFirstArgs, TQueryFnData = Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstpublic_audit_logs<TArgs extends Prisma.public_audit_logsFindFirstArgs, TQueryFnData = Prisma.public_audit_logsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/findFirst`, args, options, fetch);
}

export function useUpdatepublic_audit_logs(options?: Omit<(UseMutationOptions<(public_audit_logs | undefined), DefaultError, Prisma.public_audit_logsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsUpdateArgs, DefaultError, public_audit_logs, true>('public_audit_logs', 'PUT', `${endpoint}/public_audit_logs/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManypublic_audit_logs(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.public_audit_logsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('public_audit_logs', 'PUT', `${endpoint}/public_audit_logs/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertpublic_audit_logs(options?: Omit<(UseMutationOptions<(public_audit_logs | undefined), DefaultError, Prisma.public_audit_logsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsUpsertArgs, DefaultError, public_audit_logs, true>('public_audit_logs', 'POST', `${endpoint}/public_audit_logs/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletepublic_audit_logs(options?: Omit<(UseMutationOptions<(public_audit_logs | undefined), DefaultError, Prisma.public_audit_logsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsDeleteArgs, DefaultError, public_audit_logs, true>('public_audit_logs', 'DELETE', `${endpoint}/public_audit_logs/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, public_audit_logs, Prisma.public_audit_logsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManypublic_audit_logs(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.public_audit_logsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.public_audit_logsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('public_audit_logs', 'DELETE', `${endpoint}/public_audit_logs/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.public_audit_logsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.public_audit_logsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.public_audit_logsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePublic_audit_logs<TArgs extends Prisma.Public_audit_logsAggregateArgs, TQueryFnData = Prisma.GetPublic_audit_logsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Public_audit_logsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Public_audit_logs', `${endpoint}/public_audit_logs/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePublic_audit_logs<TArgs extends Prisma.Public_audit_logsAggregateArgs, TQueryFnData = Prisma.GetPublic_audit_logsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Public_audit_logsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Public_audit_logs', `${endpoint}/public_audit_logs/aggregate`, args, options, fetch);
}

export function useGroupBypublic_audit_logs<TArgs extends Prisma.public_audit_logsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.public_audit_logsGroupByArgs['orderBy'] } : { orderBy?: Prisma.public_audit_logsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Public_audit_logsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Public_audit_logsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Public_audit_logsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Public_audit_logsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.public_audit_logsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBypublic_audit_logs<TArgs extends Prisma.public_audit_logsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.public_audit_logsGroupByArgs['orderBy'] } : { orderBy?: Prisma.public_audit_logsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Public_audit_logsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Public_audit_logsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Public_audit_logsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Public_audit_logsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.public_audit_logsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/groupBy`, args, options, fetch);
}

export function useCountpublic_audit_logs<TArgs extends Prisma.public_audit_logsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Public_audit_logsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/count`, args, options, fetch);
}

export function useSuspenseCountpublic_audit_logs<TArgs extends Prisma.public_audit_logsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Public_audit_logsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.public_audit_logsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('public_audit_logs', `${endpoint}/public_audit_logs/count`, args, options, fetch);
}

export function useCheckpublic_audit_logs<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; user_id?: string; action?: string; table_name?: string; record_id?: string; ip_address?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('public_audit_logs', `${endpoint}/public_audit_logs/check`, args, options, fetch);
}
