/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, user_profiles } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateuser_profiles(options?: Omit<(UseMutationOptions<(user_profiles | undefined), DefaultError, Prisma.user_profilesCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesCreateArgs, DefaultError, user_profiles, true>('user_profiles', 'POST', `${endpoint}/user_profiles/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyuser_profiles(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_profilesCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('user_profiles', 'POST', `${endpoint}/user_profiles/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyuser_profiles<TArgs extends Prisma.user_profilesFindManyArgs, TQueryFnData = Array<Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findMany`, args, options, fetch);
}

export function useInfiniteFindManyuser_profiles<TArgs extends Prisma.user_profilesFindManyArgs, TQueryFnData = Array<Prisma.user_profilesGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findMany`, args, options, fetch);
}

export function useSuspenseFindManyuser_profiles<TArgs extends Prisma.user_profilesFindManyArgs, TQueryFnData = Array<Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyuser_profiles<TArgs extends Prisma.user_profilesFindManyArgs, TQueryFnData = Array<Prisma.user_profilesGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findMany`, args, options, fetch);
}

export function useFindUniqueuser_profiles<TArgs extends Prisma.user_profilesFindUniqueArgs, TQueryFnData = Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueuser_profiles<TArgs extends Prisma.user_profilesFindUniqueArgs, TQueryFnData = Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findUnique`, args, options, fetch);
}

export function useFindFirstuser_profiles<TArgs extends Prisma.user_profilesFindFirstArgs, TQueryFnData = Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstuser_profiles<TArgs extends Prisma.user_profilesFindFirstArgs, TQueryFnData = Prisma.user_profilesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/findFirst`, args, options, fetch);
}

export function useUpdateuser_profiles(options?: Omit<(UseMutationOptions<(user_profiles | undefined), DefaultError, Prisma.user_profilesUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesUpdateArgs, DefaultError, user_profiles, true>('user_profiles', 'PUT', `${endpoint}/user_profiles/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyuser_profiles(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_profilesUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('user_profiles', 'PUT', `${endpoint}/user_profiles/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertuser_profiles(options?: Omit<(UseMutationOptions<(user_profiles | undefined), DefaultError, Prisma.user_profilesUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesUpsertArgs, DefaultError, user_profiles, true>('user_profiles', 'POST', `${endpoint}/user_profiles/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteuser_profiles(options?: Omit<(UseMutationOptions<(user_profiles | undefined), DefaultError, Prisma.user_profilesDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesDeleteArgs, DefaultError, user_profiles, true>('user_profiles', 'DELETE', `${endpoint}/user_profiles/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, user_profiles, Prisma.user_profilesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyuser_profiles(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.user_profilesDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.user_profilesDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('user_profiles', 'DELETE', `${endpoint}/user_profiles/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.user_profilesDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.user_profilesDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.user_profilesDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUser_profiles<TArgs extends Prisma.User_profilesAggregateArgs, TQueryFnData = Prisma.GetUser_profilesAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.User_profilesAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('User_profiles', `${endpoint}/user_profiles/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateUser_profiles<TArgs extends Prisma.User_profilesAggregateArgs, TQueryFnData = Prisma.GetUser_profilesAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.User_profilesAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('User_profiles', `${endpoint}/user_profiles/aggregate`, args, options, fetch);
}

export function useGroupByuser_profiles<TArgs extends Prisma.user_profilesGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.user_profilesGroupByArgs['orderBy'] } : { orderBy?: Prisma.user_profilesGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.User_profilesGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.User_profilesGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.User_profilesGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.User_profilesGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.user_profilesGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByuser_profiles<TArgs extends Prisma.user_profilesGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.user_profilesGroupByArgs['orderBy'] } : { orderBy?: Prisma.user_profilesGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.User_profilesGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.User_profilesGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.User_profilesGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.User_profilesGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.user_profilesGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/groupBy`, args, options, fetch);
}

export function useCountuser_profiles<TArgs extends Prisma.user_profilesCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.User_profilesCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/count`, args, options, fetch);
}

export function useSuspenseCountuser_profiles<TArgs extends Prisma.user_profilesCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.User_profilesCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.user_profilesCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('user_profiles', `${endpoint}/user_profiles/count`, args, options, fetch);
}

export function useCheckuser_profiles<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; first_name?: string; last_name?: string; email?: string; phone?: string; avatar_url?: string; company_name?: string; company_position?: string; timezone?: string; last_login_ip?: string; auth_user?: string; property_id?: string; tenant_id?: string; lease_id?: string; maintenance_request_id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('user_profiles', `${endpoint}/user_profiles/check`, args, options, fetch);
}
