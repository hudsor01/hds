/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, verification_tokens } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateverification_tokens(options?: Omit<(UseMutationOptions<(verification_tokens | undefined), DefaultError, Prisma.verification_tokensCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensCreateArgs, DefaultError, verification_tokens, true>('verification_tokens', 'POST', `${endpoint}/verification_tokens/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyverification_tokens(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.verification_tokensCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('verification_tokens', 'POST', `${endpoint}/verification_tokens/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyverification_tokens<TArgs extends Prisma.verification_tokensFindManyArgs, TQueryFnData = Array<Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findMany`, args, options, fetch);
}

export function useInfiniteFindManyverification_tokens<TArgs extends Prisma.verification_tokensFindManyArgs, TQueryFnData = Array<Prisma.verification_tokensGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findMany`, args, options, fetch);
}

export function useSuspenseFindManyverification_tokens<TArgs extends Prisma.verification_tokensFindManyArgs, TQueryFnData = Array<Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyverification_tokens<TArgs extends Prisma.verification_tokensFindManyArgs, TQueryFnData = Array<Prisma.verification_tokensGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findMany`, args, options, fetch);
}

export function useFindUniqueverification_tokens<TArgs extends Prisma.verification_tokensFindUniqueArgs, TQueryFnData = Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueverification_tokens<TArgs extends Prisma.verification_tokensFindUniqueArgs, TQueryFnData = Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findUnique`, args, options, fetch);
}

export function useFindFirstverification_tokens<TArgs extends Prisma.verification_tokensFindFirstArgs, TQueryFnData = Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstverification_tokens<TArgs extends Prisma.verification_tokensFindFirstArgs, TQueryFnData = Prisma.verification_tokensGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/findFirst`, args, options, fetch);
}

export function useUpdateverification_tokens(options?: Omit<(UseMutationOptions<(verification_tokens | undefined), DefaultError, Prisma.verification_tokensUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensUpdateArgs, DefaultError, verification_tokens, true>('verification_tokens', 'PUT', `${endpoint}/verification_tokens/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyverification_tokens(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.verification_tokensUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('verification_tokens', 'PUT', `${endpoint}/verification_tokens/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertverification_tokens(options?: Omit<(UseMutationOptions<(verification_tokens | undefined), DefaultError, Prisma.verification_tokensUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensUpsertArgs, DefaultError, verification_tokens, true>('verification_tokens', 'POST', `${endpoint}/verification_tokens/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteverification_tokens(options?: Omit<(UseMutationOptions<(verification_tokens | undefined), DefaultError, Prisma.verification_tokensDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensDeleteArgs, DefaultError, verification_tokens, true>('verification_tokens', 'DELETE', `${endpoint}/verification_tokens/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, verification_tokens, Prisma.verification_tokensGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyverification_tokens(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.verification_tokensDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.verification_tokensDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('verification_tokens', 'DELETE', `${endpoint}/verification_tokens/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.verification_tokensDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.verification_tokensDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.verification_tokensDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateVerification_tokens<TArgs extends Prisma.Verification_tokensAggregateArgs, TQueryFnData = Prisma.GetVerification_tokensAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Verification_tokensAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification_tokens', `${endpoint}/verification_tokens/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateVerification_tokens<TArgs extends Prisma.Verification_tokensAggregateArgs, TQueryFnData = Prisma.GetVerification_tokensAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Verification_tokensAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Verification_tokens', `${endpoint}/verification_tokens/aggregate`, args, options, fetch);
}

export function useGroupByverification_tokens<TArgs extends Prisma.verification_tokensGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.verification_tokensGroupByArgs['orderBy'] } : { orderBy?: Prisma.verification_tokensGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Verification_tokensGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Verification_tokensGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Verification_tokensGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Verification_tokensGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.verification_tokensGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByverification_tokens<TArgs extends Prisma.verification_tokensGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.verification_tokensGroupByArgs['orderBy'] } : { orderBy?: Prisma.verification_tokensGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Verification_tokensGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Verification_tokensGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Verification_tokensGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Verification_tokensGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.verification_tokensGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/groupBy`, args, options, fetch);
}

export function useCountverification_tokens<TArgs extends Prisma.verification_tokensCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Verification_tokensCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/count`, args, options, fetch);
}

export function useSuspenseCountverification_tokens<TArgs extends Prisma.verification_tokensCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Verification_tokensCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.verification_tokensCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('verification_tokens', `${endpoint}/verification_tokens/count`, args, options, fetch);
}

export function useCheckverification_tokens<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { identifier?: string; token?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('verification_tokens', `${endpoint}/verification_tokens/check`, args, options, fetch);
}
