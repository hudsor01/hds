/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, stripe_webhook_events } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatestripe_webhook_events(options?: Omit<(UseMutationOptions<(stripe_webhook_events | undefined), DefaultError, Prisma.stripe_webhook_eventsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsCreateArgs, DefaultError, stripe_webhook_events, true>('stripe_webhook_events', 'POST', `${endpoint}/stripe_webhook_events/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManystripe_webhook_events(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.stripe_webhook_eventsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('stripe_webhook_events', 'POST', `${endpoint}/stripe_webhook_events/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindManyArgs, TQueryFnData = Array<Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findMany`, args, options, fetch);
}

export function useInfiniteFindManystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindManyArgs, TQueryFnData = Array<Prisma.stripe_webhook_eventsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findMany`, args, options, fetch);
}

export function useSuspenseFindManystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindManyArgs, TQueryFnData = Array<Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindManyArgs, TQueryFnData = Array<Prisma.stripe_webhook_eventsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findMany`, args, options, fetch);
}

export function useFindUniquestripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindUniqueArgs, TQueryFnData = Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquestripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindUniqueArgs, TQueryFnData = Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findUnique`, args, options, fetch);
}

export function useFindFirststripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindFirstArgs, TQueryFnData = Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirststripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsFindFirstArgs, TQueryFnData = Prisma.stripe_webhook_eventsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/findFirst`, args, options, fetch);
}

export function useUpdatestripe_webhook_events(options?: Omit<(UseMutationOptions<(stripe_webhook_events | undefined), DefaultError, Prisma.stripe_webhook_eventsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsUpdateArgs, DefaultError, stripe_webhook_events, true>('stripe_webhook_events', 'PUT', `${endpoint}/stripe_webhook_events/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManystripe_webhook_events(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.stripe_webhook_eventsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('stripe_webhook_events', 'PUT', `${endpoint}/stripe_webhook_events/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertstripe_webhook_events(options?: Omit<(UseMutationOptions<(stripe_webhook_events | undefined), DefaultError, Prisma.stripe_webhook_eventsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsUpsertArgs, DefaultError, stripe_webhook_events, true>('stripe_webhook_events', 'POST', `${endpoint}/stripe_webhook_events/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletestripe_webhook_events(options?: Omit<(UseMutationOptions<(stripe_webhook_events | undefined), DefaultError, Prisma.stripe_webhook_eventsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsDeleteArgs, DefaultError, stripe_webhook_events, true>('stripe_webhook_events', 'DELETE', `${endpoint}/stripe_webhook_events/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, stripe_webhook_events, Prisma.stripe_webhook_eventsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManystripe_webhook_events(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.stripe_webhook_eventsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.stripe_webhook_eventsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('stripe_webhook_events', 'DELETE', `${endpoint}/stripe_webhook_events/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.stripe_webhook_eventsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.stripe_webhook_eventsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateStripe_webhook_events<TArgs extends Prisma.Stripe_webhook_eventsAggregateArgs, TQueryFnData = Prisma.GetStripe_webhook_eventsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Stripe_webhook_eventsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Stripe_webhook_events', `${endpoint}/stripe_webhook_events/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateStripe_webhook_events<TArgs extends Prisma.Stripe_webhook_eventsAggregateArgs, TQueryFnData = Prisma.GetStripe_webhook_eventsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.Stripe_webhook_eventsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Stripe_webhook_events', `${endpoint}/stripe_webhook_events/aggregate`, args, options, fetch);
}

export function useGroupBystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.stripe_webhook_eventsGroupByArgs['orderBy'] } : { orderBy?: Prisma.stripe_webhook_eventsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Stripe_webhook_eventsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Stripe_webhook_eventsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Stripe_webhook_eventsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Stripe_webhook_eventsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.stripe_webhook_eventsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBystripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.stripe_webhook_eventsGroupByArgs['orderBy'] } : { orderBy?: Prisma.stripe_webhook_eventsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.Stripe_webhook_eventsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.Stripe_webhook_eventsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.Stripe_webhook_eventsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.Stripe_webhook_eventsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.stripe_webhook_eventsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/groupBy`, args, options, fetch);
}

export function useCountstripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Stripe_webhook_eventsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/count`, args, options, fetch);
}

export function useSuspenseCountstripe_webhook_events<TArgs extends Prisma.stripe_webhook_eventsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.Stripe_webhook_eventsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.stripe_webhook_eventsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/count`, args, options, fetch);
}

export function useCheckstripe_webhook_events<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; type?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('stripe_webhook_events', `${endpoint}/stripe_webhook_events/check`, args, options, fetch);
}
