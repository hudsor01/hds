datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String   @id @default(cuid())
  sessionToken    String   @unique
  userId          String
  expires         DateTime
  lastActive      DateTime @default(now())
  isRevoked       Boolean  @default(false)
  device          String?
  browser         String?
  operatingSystem String?
  ipAddress       String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                 @default("USER")
  accounts              Account[]
  sessions              Session[]
  PasswordResetToken    PasswordResetToken[]
  VerificationToken     VerificationToken[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  identifier String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
