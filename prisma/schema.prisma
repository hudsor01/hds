generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public", "auth", "admin"]
}

// Core User Model
model users {
  id                  String    @id @default(uuid()) @db.Uuid
  role                String    @default("USER")
  name                String?
  email               String    @unique
  image               String?
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime? @db.Timestamptz(6)
  stripe_customer_id  String?
  subscription_status String?   @default("inactive")

  // Relations
  properties           properties[]           @relation("UserProperties")
  tenants              tenants[]              @relation("UserTenancies")
  maintenance_requests maintenance_requests[] @relation("UserMaintenanceRequests")
  payments            payments[]             @relation("UserPayments")
  sessions            Session[]
  inspections          inspections[]          @relation("UserInspections")
  vendors              vendors[]              @relation("UserVendors")
  work_orders          work_orders[]          @relation("UserWorkOrders")

  @@schema("public")
  @@index([email])
}

model properties {
  id              String    @id @default(uuid()) @db.Uuid
  name            String
  address         String
  city            String
  state           String
  zip             String
  property_status String    @default("active")
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  property_type   String    @default("Residential")
  rent_amount     Decimal   @db.Decimal(10, 2)
  user_id         String    @db.Uuid

  // Relations
  User                 users                  @relation("UserProperties", fields: [user_id], references: [id])
  maintenance_requests maintenance_requests[] @relation("PropertyMaintenanceRequests")
  tenants             tenants[]              @relation("PropertyTenancies")
  payments            payments[]             @relation("PropertyPayments")
  leases              leases[]               @relation("PropertyLeases")
  inspections         inspections[]          @relation("PropertyInspections")
  work_orders          work_orders[]          @relation("PropertyWorkOrders")

  @@schema("public")
  @@index([property_status])
  @@index([user_id])
}

model maintenance_requests {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String
  priority    String    @default("LOW")
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  property_id String    @db.Uuid
  user_id     String    @db.Uuid

  // Relations
  property properties @relation("PropertyMaintenanceRequests", fields: [property_id], references: [id])
  user     users      @relation("UserMaintenanceRequests", fields: [user_id], references: [id])

  @@schema("public")
  @@index([property_id])
  @@index([user_id])
}

model tenants {
  id                  String    @id @default(uuid()) @db.Uuid
  property_id         String    @db.Uuid
  first_name          String
  last_name           String
  email               String
  phone               String?
  tenant_status       String    @default("active")
  move_in_date        DateTime? @db.Date
  move_out_date       DateTime? @db.Date
  emergency_contact   Json?     @default("{}")
  documents           Json[]    @default([])
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime  @default(now()) @db.Timestamptz(6)
  user_id             String    @db.Uuid

  // Relations
  User                 users                  @relation("UserTenancies", fields: [user_id], references: [id])
  property             properties             @relation("PropertyTenancies", fields: [property_id], references: [id])
  payments             payments[]

  @@schema("public")
  @@index([tenant_status])
  @@index([property_id])
  @@index([email])
}

model accounts {
  id                String  @id
  user_id           String
  account_type      String
  provider          String
  provider_account_id String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, provider_account_id])
  @@schema("public")
}

model documents {
  id          String    @id(map: "documents_pkey") @default(uuid()) @db.Uuid
  name        String
  description String?
  url         String
  type        String
  size        BigInt?
  property_id  String?   @db.Uuid
  lease_id     String?   @db.Uuid
  uploaded_by  String    @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_templates {
  id         String    @id @default(uuid()) @db.Uuid
  name       String    @db.VarChar(255)
  subject    String    @db.VarChar(255)
  body       String
  content    String
  variables  Json?     @default("{}")
  is_active  Boolean?  @default(true)
  created_by String    @db.Uuid
  updated_by String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("admin")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expenses {
  id          String    @id @default(uuid()) @db.Uuid
  property_id String    @db.Uuid
  tenant_id   String?   @db.Uuid
  category    String
  amount      Decimal   @db.Decimal(10, 2)
  description String?
  date        DateTime  @db.Date
  receipt_url String?
  created_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([category])
  @@index([property_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ip_blacklist {
  id         String    @id @default(uuid()) @db.Uuid
  ip_address String    @unique @db.Inet
  reason     String
  added_by   String?   @db.Uuid
  expires_at DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([expires_at], map: "ip_blacklist_expires_idx")
  @@index([ip_address], map: "ip_blacklist_ip_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model leases {
  user_id       String    @id @default(uuid()) @db.Uuid
  tenant_id     String
  property_id   String    @db.Uuid
  lease_type    LeaseType
  start_date    DateTime
  end_date      DateTime?
  rent_amount   Decimal
  depositAmount Decimal
  payment_day   Int
  documents     String[]
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  lease_status        String?   @default("Pending")

  // Relations
  property properties @relation("PropertyLeases", fields: [property_id], references: [id])

  @@index([created_at])
  @@index([end_date])
  @@index([property_id], map: "leases_propertyId_idx")
  @@index([start_date])
  @@index([tenant_id], map: "leases_tenantId_idx")
  @@index([tenant_id])
  @@index([lease_type])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model login_history {
  id             String    @id @default(uuid()) @db.Uuid
  user_id        String?   @db.Uuid
  ip_address     String?   @db.VarChar(45)
  user_agent     String?
  success        Boolean?  @default(true)
  failure_reason String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model message_threads {
  id              String    @id @default(uuid()) @db.Uuid
  subject         String
  last_message_id String?   @db.Uuid
  participants    String[]  @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([participants], type: Gin)
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model messages {
  id           String    @id @default(uuid()) @db.Uuid
  sender_id    String    @db.Uuid
  recipient_id String    @db.Uuid
  subject      String?
  content      String
  read_at      DateTime? @db.Timestamptz(6)
  attachments  String[]  @default([])
  parent_id    String?   @db.Uuid
  thread_id    String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([recipient_id])
  @@index([sender_id])
  @@index([thread_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id         String            @id @default(uuid()) @db.Uuid
  user_id    String            @db.Uuid
  type       NotificationType
  title      String
  message    String
  data       Json?             @default("{}")
  read_at    DateTime?         @db.Timestamptz(6)
  created_at DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at DateTime?         @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([type])
  @@index([user_id])
  @@schema("public")
}

model organizations {
  user_id    String    @id @unique(map: "organizations_id_key") @db.Uuid
  name       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)


  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model password_reset_requests {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String?   @db.Uuid
  token      String
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([expires_at], map: "password_reset_expires_at_idx")
  @@index([token], map: "password_reset_token_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payments {
  id                String    @id @default(uuid()) @db.Uuid
  tenant_id         String    @db.Uuid
  property_id       String    @db.Uuid
  payment_amount    Decimal   @db.Decimal(10, 2)
  payment_type      String
  payment_method    String
  payment_date      DateTime  @db.Date
  payment_status    String    @default("PENDING")
  payment_notes     String?
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @default(now()) @db.Timestamptz(6)
  user_id           String    @db.Uuid

  // Relations
  tenant    tenants    @relation(fields: [tenant_id], references: [id])
  property  properties @relation("PropertyPayments", fields: [property_id], references: [id])
  user      users      @relation("UserPayments", fields: [user_id], references: [id])

  @@schema("public")
  @@index([payment_status])
  @@index([tenant_id])
  @@index([property_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  user_id    String    @id @unique(map: "profiles_id_key")
  /// RLS_ENABLED
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model rent_payment {
  id             String    @id @default(uuid()) @db.Uuid
  property_id    String    @db.Uuid
  tenant_id      String    @db.Uuid
  payment_amount         Decimal   @db.Decimal(10, 2)
  due_date       DateTime  @db.Date
  paid_date      DateTime? @db.Date
  payment_status         String    @default("pending")
  PaymentMethod String?
  invoice_number String?
  transaction_id String?
  late_fee       Decimal?  @default(0) @db.Decimal(10, 2)
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([due_date])
  @@index([property_id])
  @@index([tenant_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model security_audit_log {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String?   @db.Uuid
  event_type    String
  resource_type String
  resource_id   String?
  ip_address    String?   @db.Inet
  user_agent    String?
  old_values    Json?
  new_values    Json?
  metadata      Json?
  severity      String
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "security_audit_created_at_idx")
  @@index([event_type], map: "security_audit_event_type_idx")
  @@index([resource_type, resource_id], map: "security_audit_resource_idx")
  @@index([user_id], map: "security_audit_user_id_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String?   @db.Uuid
  product_id            String
  subscription_status   String
  subscription_type     String
  subscription_start_date DateTime? @db.Date
  subscription_end_date   DateTime? @db.Date
  stripe_subscription_id  String?
  stripe_customer_id      String?
  stripe_product_id       String?
  stripe_price_id         String?
  stripe_price_amount     Decimal? @db.Decimal(10, 2)
  stripe_price_currency   String?
  stripe_price_interval   String?
  stripe_price_usage_type String?
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  active_until           DateTime? @db.Timestamptz(6)

  @@unique([user_id, product_id])
  @@index([active_until])
  @@index([product_id])
  @@index([subscription_status])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model system_configurations {
  id          String    @id @default(uuid()) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       Json
  description String?
  updated_by  String?   @db.Uuid
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_activity_logs {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String?   @db.Uuid
  action     String
  entity     String
  entity_id  String?   @db.Uuid
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([action])
  @@index([created_at])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_profiles {
  id                       String    @id @db.Uuid
  first_name               String?
  last_name                String?
  email                    String    @unique
  phone                    String?
  avatar_url               String?
  compunknown_name             String?
  compunknown_position         String?
  timezone                 String?   @default("UTC")
  notification_preferences Json?     @default("{}")
  last_login_at            DateTime? @db.Timestamptz(6)
  last_login_ip            String?
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  auth_user                String    @unique @db.Uuid
  property_id              String?   @db.Uuid
  tenant_id                String?   @db.Uuid
  lease_id                 String?   @db.Uuid
  maintenance_request_id   String?   @db.Uuid

  @@index([email])
  @@map("user_profiles")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_security_settings {
  user_id                 String    @id @db.Uuid
  two_factor_enabled      Boolean?  @default(false)
  two_factor_method       String?
  backup_codes            String[]
  allowed_ips             String[]  @db.Inet
  max_sessions            Int?      @default(5)
  password_expires_at     DateTime? @db.Timestamptz(6)
  require_password_change Boolean?  @default(false)
  last_password_change    DateTime? @db.Timestamptz(6)
  security_questions      Json?
  login_notifications     Boolean?  @default(true)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_settings {
  id                    String    @id @db.Uuid
  theme                 String?   @default("light")
  language              String?   @default("en")
  currency              String?   @default("USD")
  date_format           String?   @default("MM/DD/YYYY")
  time_format           String?   @default("12h")
  notifications_enabled Boolean?  @default(true)
  email_notifications   Boolean?  @default(true)
  sms_notifications     Boolean?  @default(false)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model waitlist_attempts {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_waitlist_attempts_created_at")
  @@index([identifier], map: "idx_waitlist_attempts_identifier")
  @@schema("public")
}

model schema_migrations {
  version String @id @unique(map: "schema_migrations_version_idx") @db.VarChar(14)

  @@schema("public")
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String    @id @default(uuid()) @db.Uuid
  created_at      DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  organization_id String    @unique @default(uuid()) @db.Uuid
  user_id         String    @unique @default(uuid()) @db.Uuid
  role            String?   @default("'member'")
  updated_at      DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity {
  userId           String       @default(uuid()) @db.Uuid
  activity_log_id  String       @default(uuid()) @db.Uuid
  activity_type    ActivityType
  entityType       EntityType
  entityId         String
  description      String
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @db.Timestamptz(6)
  id               String       @id(map: "activities_pkey") @default(uuid()) @db.Uuid

  @@index([activity_type], map: "activities_type_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AdminAuditLog {
  id         String      @id(map: "admin_audit_logs_pkey") @default(uuid()) @db.Uuid
  userId     String?     @db.Uuid
  entityType EntityType
  entityId   String?     @db.Uuid
  oldValues  Json?
  newValues  Json?
  ipAddress  String?     @db.VarChar(45)
  userAgent  String?
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)

  @@schema("public")
}
// System & User Management
enum ActivityType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  @@schema("public")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROPERTY_MANAGER
  PROPERTY_OWNER
  MAINTENANCE
  TENANT
  USER
  @@schema("public")
}

enum EntityType {
  USER
  PROPERTY
  TENANT
  LEASE
  PAYMENT
  MAINTENANCE
  DOCUMENT
  SETTINGS
  EMAIL_TEMPLATE
  ROUTE
  @@schema("public")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ADMIN_ACCESS
  SETTINGS_CHANGE
  PASSWORD_RESET
  EMAIL_CHANGE
  ROLE_CHANGE
  @@schema("public")
}

// Property & Tenant Management
enum PropertyType {
  SINGLE_FAMILY
  MULTI_FAMILY
  APARTMENT
  CONDO
  TOWNHOUSE
  COMMERCIAL
  INDUSTRIAL
  LAND
  @@schema("public")
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  VACANT
  MAINTENANCE
  RENOVATION
  OFF_MARKET
  @@schema("public")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
  @@schema("public")
}

enum LeaseType {
  FIXED_TERM
  MONTH_TO_MONTH
  WEEKLY
  YEARLY
  @@schema("public")
}

// Payments & Invoices
enum PaymentStatus {
  PENDING
  PAID
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  OVERDUE
  LATE
  PARTIAL

  @@schema("public")
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
  @@schema("public")
}

enum PaymentType {
  RENT
  DEPOSIT
  SUBSCRIPTION
  LATE_FEE
  MAINTENANCE
  UTILITIES
  SECURITY_DEPOSIT
  OTHER

  @@schema("public")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
  @@schema("public")
}

enum InvoiceTemplateType {
  STANDARD
  CUSTOM
  @@schema("public")
}

// Communication & Notifications
enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  @@schema("public")
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
  @@schema("public")
}

enum NotificationType {
  SYSTEM
  MAINTENANCE
  PAYMENT
  LEASE
  MESSAGE
  ALERT
  @@schema("public")
}

// Maintenance & Requests
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  @@schema("public")
}

// Tools & Jobs
enum ToolType {
  PROPERTY_MANAGER
  PROJECT_MANAGER
  IMAGE_OPTIMIZER
  DOCUMENT_MANAGER
  @@schema("public")
}

enum ImageJobPriority {
  LOW
  MEDIUM
  HIGH
  @@schema("public")
}

enum ImageJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  @@schema("public")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID

  @@schema("public")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  user_id      String   @db.Uuid
  expires      DateTime
  users        users    @relation(fields: [user_id], references: [id])

  @@schema("public")
}

// Admin schema models
model analytics {
  id         String    @id @default(uuid()) @db.Uuid
  created_by String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  data       Json?     @default("{}")

  @@schema("admin")
}

model audit_logs {
  id            String    @id @default(uuid()) @db.Uuid
  performed_by  String    @db.Uuid
  action        String
  resource_type String
  resource_id   String?   @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  details       Json?     @default("{}")

  @@schema("admin")
}

model settings {
  key         String    @id
  value       Json
  updated_by  String    @db.Uuid
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  description String?

  @@schema("admin")
}

model inspections {
  id              String    @id @default(uuid()) @db.Uuid
  property_id     String    @db.Uuid
  user_id         String    @db.Uuid
  inspection_type String
  status          String    @default("SCHEDULED")
  scheduled_date  DateTime  @db.Timestamptz(6)
  completed_date  DateTime? @db.Timestamptz(6)
  inspector_name  String
  findings        Json?     @default("[]")
  notes           String?
  report_url      String?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  property        properties @relation("PropertyInspections", fields: [property_id], references: [id])
  user           users      @relation("UserInspections", fields: [user_id], references: [id])

  @@schema("public")
  @@index([property_id])
  @@index([user_id])
  @@index([status])
  @@index([inspection_type])
}

model vendors {
  id              String    @id @default(uuid()) @db.Uuid
  user_id         String    @db.Uuid
  compunknown_name    String
  contact_name    String
  email           String
  phone           String
  address         String?
  services        String[]
  rate            Decimal?  @db.Decimal(10, 2)
  rating          Int?      @db.SmallInt
  status          String    @default("ACTIVE")
  insurance_info  Json?
  license_info    Json?
  notes           String?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  user            users     @relation("UserVendors", fields: [user_id], references: [id])
  work_orders     work_orders[] @relation("VendorWorkOrders")

  @@schema("public")
  @@index([user_id])
  @@index([status])
  @@index([email])
}

model work_orders {
  id              String    @id @default(uuid()) @db.Uuid
  vendor_id       String    @db.Uuid
  property_id     String    @db.Uuid
  maintenance_id  String?   @db.Uuid
  title          String
  description    String
  priority       String    @default("LOW")
  status         String    @default("PENDING")
  scheduled_date DateTime  @db.Timestamptz(6)
  completed_date DateTime? @db.Timestamptz(6)
  estimated_cost Decimal?  @db.Decimal(10, 2)
  actual_cost    Decimal?  @db.Decimal(10, 2)
  notes          String?
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  user_id        String    @db.Uuid

  // Relations
  vendor         vendors    @relation("VendorWorkOrders", fields: [vendor_id], references: [id])
  property       properties @relation("PropertyWorkOrders", fields: [property_id], references: [id])
  user           users      @relation("UserWorkOrders", fields: [user_id], references: [id])

  @@schema("public")
  @@index([vendor_id])
  @@index([property_id])
  @@index([status])
  @@index([user_id])
}

enum WaitlistStatus {
  PENDING
  ACTIVE
  VERIFIED
  BLOCKED

  @@schema("public")
}

model waitlist {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  name          String?
  position      Int
  status        WaitlistStatus @default(PENDING)
  referral_code String?        @unique
  referred_by   String?
  email_verified Boolean       @default(false)
  verified_at   DateTime?      @db.Timestamptz(6)
  metadata      Json?          @default("{}")
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @db.Timestamptz(6)

  // Relations
  referrer      waitlist?      @relation("ReferralRelation", fields: [referred_by], references: [email])
  referrals     waitlist[]     @relation("ReferralRelation")
  events        waitlist_events[]

  @@index([position])
  @@index([status])
  @@index([referral_code])
  @@index([referred_by])
  @@index([created_at])
  @@schema("public")
}

model waitlist_events {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  type      String
  metadata  Json?    @default("{}")
  timestamp DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  waitlist  waitlist @relation(fields: [email], references: [email])

  @@index([email])
  @@index([type])
  @@index([timestamp])
  @@schema("public")
}

model WaitlistVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([email])
  @@schema("public")
}
