datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Auth schema models
model AuthUser {
  id                String    @id(map: "users_pkey_auth") @default(uuid())
  email             String    @unique(map: "users_email_key_auth")
  encrypted_password String
  raw_user_meta_data Json?
  raw_app_meta_data  Json?
  email_confirmed_at DateTime?
  confirmed_at      DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@map("users")
  @@schema("auth")
}

// Public schema models for NextAuth
model Account {
  id                String  @id(map: "accounts_pkey_public") @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "accounts_provider_account_id_key_public")
  @@map("accounts")
  @@schema("public")
}

model Session {
  id           String   @id(map: "sessions_pkey_public") @default(uuid())
  sessionToken String   @unique(map: "sessions_token_key_public")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model User {
  id                String    @id(map: "users_pkey_public") @default(uuid())
  name              String?
  email             String?   @unique(map: "users_email_key_public")
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  stripeCustomerId  String?
  subscriptionStatus String?

  @@map("users")
  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "verification_token_token_key_public")
  expires    DateTime

  @@unique([identifier, token], map: "verification_token_identifier_token_key_public")
  @@map("verification_tokens")
  @@schema("public")
}
