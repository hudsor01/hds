datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public", "private"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Auth schema models
model AuthUser {
  id                       String    @id @default(uuid()) @map("id")
  email                    String    @unique
  encrypted_password       String?
  email_confirmed_at       DateTime?
  last_sign_in_at          DateTime?
  raw_app_meta_data        Json?
  raw_user_meta_data       Json?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  phone                    String?
  phone_confirmed_at       DateTime?
  confirmation_sent_at     DateTime?
  recovery_sent_at         DateTime?
  reauthentication_sent_at DateTime?
  is_sso_user              Boolean   @default(false)

  stripe_customer_id     String?   @unique @map("stripe_customer_id")
  stripe_subscription_id String?   @map("stripe_subscription_id")
  subscription_status    String?   @map("subscription_status")
  trial_ends_at          DateTime? @map("trial_ends_at")
  role                   String?   @default("user")

  @@map("users")
  @@schema("auth")
}

// Public schema models for NextAuth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("public")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  stripeCustomerId   String?
  subscriptionStatus String?
  trialEndsAt        DateTime?
  role               String?   @default("user")

  @@map("users")
  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("public")
}
