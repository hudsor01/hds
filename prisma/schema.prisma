generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()"))
  clerkId             String   @unique
  role                String   @default("USER")
  name                String?
  email               String   @unique
  image               String?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)
  stripe_customer_id  String?
  subscription_status String?

  // Relations (remove duplicates)
  properties           properties[]           @relation("UserProperties")
  tenancies            Tenancy[]              @relation("UserTenancies")
  maintenance_requests maintenance_requests[] @relation("UserMaintenanceRequests")

  @@map("Users")
  @@schema("public")
}

model Tenancy {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  unitId           String    @map("unit_id") @db.Uuid
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  email            String
  phone            String?
  status           String    @default("active")
  moveInDate       DateTime? @map("move_in_date") @db.Date
  moveOutDate      DateTime? @map("move_out_date") @db.Date
  emergencyContact Json?     @default("{}") @map("emergency_contact")
  documents        Json[]    @default([])
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user             User      @relation("UserTenancies", fields: [user_id], references: [id])
  user_id          String

  @@index([status])
  @@index([unitId])
  @@map("tenants")
  @@schema("public")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Documents {
  id          String    @id(map: "documents_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  url         String
  type        String
  size        BigInt?
  propertyId  String?   @db.Uuid
  leaseId     String?   @db.Uuid
  uploadedBy  String    @db.Uuid
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_templates {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  subject    String    @db.VarChar(255)
  body       String
  variables  Json?
  is_active  Boolean?  @default(true)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expenses {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id String    @db.Uuid
  category    String
  amount      Decimal   @db.Decimal(10, 2)
  description String?
  date        DateTime  @db.Date
  receipt_url String?
  created_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([category])
  @@index([property_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ip_blacklist {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ip_address String    @unique @db.Inet
  reason     String
  added_by   String?   @db.Uuid
  expires_at DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([expires_at], map: "ip_blacklist_expires_idx")
  @@index([ip_address], map: "ip_blacklist_ip_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model leases {
  user_id       String    @id @default(dbgenerated("auth.uid()")) @db.Uuid
  tenant_id     String
  property_id   String
  type          LeaseType
  start_date    DateTime
  end_date      DateTime?
  rent_amount   Decimal
  depositAmount Decimal
  payment_day   Int
  documents     String[]
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  status        String?   @default("Pending")

  @@index([created_at])
  @@index([end_date])
  @@index([property_id], map: "leases_propertyId_idx")
  @@index([start_date])
  @@index([tenant_id], map: "leases_tenantId_idx")
  @@index([tenant_id])
  @@index([type])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model login_history {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?   @db.Uuid
  ip_address     String?   @db.VarChar(45)
  user_agent     String?
  success        Boolean?  @default(true)
  failure_reason String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model maintenance_requests {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  status      String?   @default("PENDING")
  priority    String?   @default("MEDIUM")
  property_id String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  // Relations (only define ONCE)
  user         User   @relation("UserMaintenanceRequests", fields: [requester_id], references: [id], onDelete: Cascade)
  requester_id String

  properties properties? @relation(fields: [property_id], references: [id])

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model message_threads {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subject         String
  last_message_id String?   @db.Uuid
  participants    String[]  @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([participants], type: Gin)
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model messages {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender_id    String    @db.Uuid
  recipient_id String    @db.Uuid
  subject      String?
  content      String
  read_at      DateTime? @db.Timestamptz(6)
  attachments  String[]  @default([])
  parent_id    String?   @db.Uuid
  thread_id    String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([recipient_id])
  @@index([sender_id])
  @@index([thread_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String            @db.Uuid
  type       notification_type
  title      String
  message    String
  data       Json?             @default("{}")
  read_at    DateTime?         @db.Timestamptz(6)
  created_at DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at DateTime?         @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([type])
  @@index([user_id])
  @@schema("public")
}

model organizations {
  user_id    String    @id @unique(map: "organizations_id_key") @db.Uuid
  name       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model password_reset_requests {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([expires_at], map: "password_reset_expires_at_idx")
  @@index([token], map: "password_reset_token_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payments {
  user_id     String         @id @default(dbgenerated("auth.uid()")) @db.Uuid
  lease_id    String
  tenant_id   String
  property_id String
  amount      Decimal
  due_date    DateTime
  paid_date   DateTime?
  status      paymentstatus  @default(Pending)
  method      PaymentMethod?
  reference   String?
  created_at  DateTime       @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@index([due_date])
  @@index([lease_id], map: "payments_leaseId_idx")
  @@index([property_id], map: "payments_propertyId_idx")
  @@index([property_id])
  @@index([status, created_at])
  @@index([status])
  @@index([tenant_id], map: "payments_tenantId_idx")
  @@index([tenant_id])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  user_id    String    @id @unique(map: "profiles_id_key")
  /// RLS_ENABLED
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model properties {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String
  address              String
  city                 String
  state                String
  zip                  String
  owner_id             String                 @db.Uuid
  manager_id           String?                @db.Uuid
  status               String                 @default("active")
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  type                 String                 @default("Residential")
  rent_amount          Decimal                @db.Decimal(10, 2)
  amenities            String[]               @default([])
  images               String[]               @default([])
  bathrooms            Int?
  bedrooms             Int?
  size                 Int?
  maintenance_requests maintenance_requests[]
  user_id              String
  User                 User     @relation(fields: [user_id], references: [id])

  @@index([owner_id], map: "idx_properties_owner")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model rent_payments {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id    String    @db.Uuid
  unit_id        String    @db.Uuid
  tenant_id      String    @db.Uuid
  amount         Decimal   @db.Decimal(10, 2)
  due_date       DateTime  @db.Date
  paid_date      DateTime? @db.Date
  status         String    @default("pending")
  payment_method String?
  invoice_number String?
  transaction_id String?
  late_fee       Decimal?  @default(0) @db.Decimal(10, 2)
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([due_date])
  @@index([property_id])
  @@index([tenant_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model security_audit_log {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  event_type    String
  resource_type String
  resource_id   String?
  ip_address    String?   @db.Inet
  user_agent    String?
  old_values    Json?
  new_values    Json?
  metadata      Json?
  severity      String
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "security_audit_created_at_idx")
  @@index([event_type], map: "security_audit_event_type_idx")
  @@index([resource_type, resource_id], map: "security_audit_resource_idx")
  @@index([user_id], map: "security_audit_user_id_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?   @db.Uuid
  product_id   String
  status       String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  active_until DateTime? @db.Timestamptz(6)

  @@unique([user_id, product_id])
  @@index([active_until])
  @@index([product_id])
  @@index([status])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model system_configurations {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       Json
  description String?
  updated_by  String?   @db.Uuid
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model units {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id String    @db.Uuid
  unit_number String
  floor_plan  String?
  square_feet Int?
  bedrooms    Int?
  bathrooms   Decimal?  @db.Decimal(3, 1)
  rent_amount Decimal?  @db.Decimal(10, 2)
  status      String    @default("vacant")
  features    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([property_id, unit_number])
  @@index([property_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_activity_logs {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  action     String
  entity     String
  entity_id  String?   @db.Uuid
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([action])
  @@index([created_at])
  @@index([user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_profiles {
  id                       String    @id @db.Uuid
  first_name               String?
  last_name                String?
  email                    String    @unique
  phone                    String?
  avatar_url               String?
  company_name             String?
  company_position         String?
  timezone                 String?   @default("UTC")
  notification_preferences Json?     @default("{}")
  last_login_at            DateTime? @db.Timestamptz(6)
  last_login_ip            String?
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  auth_user                String    @unique @db.Uuid

  @@index([email])
  @@map("user_profiles")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_security_settings {
  user_id                 String    @id @db.Uuid
  two_factor_enabled      Boolean?  @default(false)
  two_factor_method       String?
  backup_codes            String[]
  allowed_ips             String[]  @db.Inet
  max_sessions            Int?      @default(5)
  password_expires_at     DateTime? @db.Timestamptz(6)
  require_password_change Boolean?  @default(false)
  last_password_change    DateTime? @db.Timestamptz(6)
  security_questions      Json?
  login_notifications     Boolean?  @default(true)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_settings {
  id                    String    @id @db.Uuid
  theme                 String?   @default("light")
  language              String?   @default("en")
  currency              String?   @default("USD")
  date_format           String?   @default("MM/DD/YYYY")
  time_format           String?   @default("12h")
  notifications_enabled Boolean?  @default(true)
  email_notifications   Boolean?  @default(true)
  sms_notifications     Boolean?  @default(false)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model waitlist_attempts {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  identifier String
  created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  @@index([created_at], map: "idx_waitlist_attempts_created_at")
  @@index([identifier], map: "idx_waitlist_attempts_identifier")
  @@schema("public")
}

model schema_migrations {
  version String @id @unique(map: "schema_migrations_version_idx") @db.VarChar(14)

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                       String
  encrypted_password          String
  email_confirmed_at          DateTime? @db.Timestamptz(6)
  invited_at                  DateTime? @db.Timestamptz(6)
  confirmation_token          String?
  confirmation_sent_at        DateTime? @db.Timestamptz(6)
  recovery_token              String?
  recovery_sent_at            DateTime? @db.Timestamptz(6)
  email_change_token          String?
  email_change                String?
  email_change_sent_at        DateTime? @db.Timestamptz(6)
  last_sign_in_at             DateTime? @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime? @db.Timestamptz(6)
  updated_at                  DateTime? @db.Timestamptz(6)
  phone                       String?
  phone_confirmed_at          DateTime? @db.Timestamptz(6)
  phone_change                String?   @default("")
  phone_change_token          String?   @default("")
  phone_change_sent_at        DateTime? @db.Timestamptz(6)
  confirmed_at                DateTime? @db.Timestamptz(6)
  email_change_confirm_status Int?      @default(0) @db.SmallInt
  banned_until                DateTime? @db.Timestamptz(6)
  reauthentication_token      String?   @default("")
  reauthentication_sent_at    DateTime? @db.Timestamptz(6)
  is_sso_user                 Boolean?  @default(false)
  deleted_at                  DateTime? @db.Timestamptz(6)
  stripe_customer_id          String?   @unique
  stripe_subscription_id      String?
  subscription_status         String?   @default("inactive")
  trial_ends_at               DateTime? @db.Timestamptz(6)
  provider                    String?
  provider_account_id         String?
  access_token                String?
  refresh_token               String?
  expires_at                  Int?
  email_verified              DateTime? @db.Timestamp(6)

  @@unique([provider, provider_account_id], map: "users_provider_account_unique")
  @@index([email_verified], map: "idx_users_email_verified")
  @@index([email])
  @@index([email], map: "users_email_idx_auth")
  @@index([phone])
  @@schema("auth")
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token])
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  organization_id String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role            String?   @default("'member'")
  updated_at      DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Activity {
  userId      String       @default(dbgenerated("auth.uid()")) @db.Uuid
  type        ActivityType
  entityType  EntityType
  entityId    String
  description String
  createdAt   DateTime?    @default(now()) @db.Timestamptz(6)
  id          String       @id(map: "activities_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@index([type], map: "activities_type_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AdminAuditLog {
  id         String      @id(map: "admin_audit_logs_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?     @db.Uuid
  entityType entity_type
  entityId   String?     @db.Uuid
  oldValues  Json?
  newValues  Json?
  ipAddress  String?     @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT

  @@schema("public")
}

enum LeaseType {
  FIXED_TERM
  MONTH_TO_MONTH
  WEEKLY
  YEARLY

  @@schema("public")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED

  @@schema("public")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ADMIN_ACCESS
  SETTINGS_CHANGE
  PASSWORD_RESET
  EMAIL_CHANGE
  ROLE_CHANGE
}

enum EntityType {
  PROPERTY
  TENANT
  LEASE
  PAYMENT
  MAINTENANCE
  DOCUMENT
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROPERTY_MANAGER
  MAINTENANCE
  TENANT
  USER
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum ToolType {
  property_manager
  project_manager
  image_optimizer
  document_manager

  @@schema("public")
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK

  @@schema("public")
}

enum entity_type {
  USER
  PROPERTY
  TENANT
  MAINTENANCE
  PAYMENT
  LEASE
  DOCUMENT
  SETTINGS
  EMAIL_TEMPLATE
  ROUTE

  @@schema("public")
}

enum image_job_priority {
  low
  medium
  high
}

enum image_job_status {
  pending
  processing
  completed
  failed
}

enum invoice_status {
  draft
  pending
  paid
  overdue
  cancelled

  @@schema("public")
}

enum invoice_template_type {
  standard
  custom

  @@schema("public")
}

enum notification_type {
  system
  maintenance
  payment
  lease
  message
  alert

  @@schema("public")
}

enum payment_status {
  pending
  paid
  partial
  late
  overdue
  cancelled
  refunded

  @@schema("public")
}

enum paymentcategory {
  RENT
  SECURITY_DEPOSIT
  LATE_FEE
  MAINTENANCE
  UTILITIES
  OTHER

  @@schema("public")
}

enum paymentmethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
  @@schema("public")
}

enum paymentstatus {
  Pending
  Paid
  Overdue
  Cancelled
  @@schema("public")
}

enum paymenttype {
  Rent
  Deposit
  Maintenance
  Other

  @@schema("public")
}

enum property_status {
  available
  occupied
  maintenance
  renovation
  off_market
  @@schema("public")
}

enum property_type {
  single_family
  multi_family
  apartment
  condo
  townhouse
  commercial
  industrial
  land
  @@schema("public")
}

enum propertystatus {
  Occupied
  Vacant
  Maintenance
  @@schema("public")
}

enum propertytype {
  Residential
  Commercial
  Industrial
  @@schema("public")
}

enum request_status {
  pending
  approved
  rejected
  @@schema("public")
}

enum Role {
  ADMIN
  PROPERTY_MANAGER
  PROPERTY_OWNER
  MAINTENANCE
  TENANT
  USER
  @@schema("public")
}

model secrets {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?
  secret      String
  description String   @default("")
  key_id      String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  @@schema("vault")
  @@index([name], map: "secrets_name_idx")
}
