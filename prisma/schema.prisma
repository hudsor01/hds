datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["auth", "public", "private"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "tracing"]
}

model Waitlist {
  id           String   @id @default(cuid())
  email        String   @unique
  firstName    String?
  lastName     String?
  propertyCount String?
  interests    String[]
  referralSource String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  newsletter   Boolean  @default(true)
  status       String   @default("pending") // pending, validated, invited

@@schema("public")
}


// Auth schema models
model AuthUser {
  id                       String    @id @default(uuid()) @map("id")
  email                    String    @unique
  encrypted_password       String?
  email_confirmed_at       DateTime?
  last_sign_in_at          DateTime?
  raw_app_meta_data        Json?
  raw_user_meta_data       Json?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  phone                    String?
  phone_confirmed_at       DateTime?
  confirmation_sent_at     DateTime?
  recovery_sent_at         DateTime?
  reauthentication_sent_at DateTime?
  is_sso_user              Boolean   @default(false)

  stripe_customer_id     String?   @unique @map("stripe_customer_id")
  stripe_subscription_id String?   @map("stripe_subscription_id")
  subscription_status    String?   @map("subscription_status")
  trial_ends_at          DateTime? @map("trial_ends_at")
  role                   String?   @default("user")

  @@map("users")
  @@schema("auth")
}

// Public schema models for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId           String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  stripe_customer_id     String?   @unique
  stripe_subscription_id String?
  subscription_status    String?
  trial_ends_at          DateTime?
  properties    Property[]
  tenancies     Tenancy[]
  maintenanceRequests MaintenanceRequest[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
  @@schema("public")
}

model Property {
  id          String    @id @default(cuid())
  title       String
  address     String
  type        String
  status      String    @default("AVAILABLE")
  rent        Float
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  tenancies   Tenancy[]
  maintenanceRequests MaintenanceRequest[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@schema("public")
}

model Tenancy {
  id          String    @id @default(cuid())
  startDate   DateTime
  endDate     DateTime?
  rent        Float
  status      String    @default("ACTIVE")
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  tenantId    String
  tenant      User      @relation(fields: [tenantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@schema("public")
}

model MaintenanceRequest {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String    @default("PENDING")
  priority    String    @default("MEDIUM")
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  requesterId String
  requester   User      @relation(fields: [requesterId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("public")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  company   String?
  createdAt DateTime @default(now())

  @@schema("public")
}
