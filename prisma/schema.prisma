datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public", "private"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Waitlist {
  id           String   @id @default(cuid())
  email        String   @unique
  firstName    String?
  lastName     String?
  propertyCount String?
  interests    String[]
  referralSource String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  newsletter   Boolean  @default(true)
  status       String   @default("pending") // pending, validated, invited

@@schema("public")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  stripe_customer_id     String?   @unique
  subscription_status    String?
  properties    Property[]
  tenancies     Tenancy[]
  maintenanceRequests MaintenanceRequest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
  @@schema("public")
}

model Property {
  id          String    @id @default(uuid())
  title       String
  address     String
  type        String
  status      String    @default("AVAILABLE")
  rent        Float
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  tenancies   Tenancy[]
  maintenanceRequests MaintenanceRequest[]
  organizations Organization[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@schema("public")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   OrganizationMember[]
  properties Property[]

  @@schema("public")
}

model Tenancy {
  id                String    @id @default(uuid()) @db.Uuid
  unitId           String    @map("unit_id") @db.Uuid
  firstName        String    @map("first_name") @db.Text
  lastName         String    @map("last_name") @db.Text
  email            String    @db.Text
  phone            String    @db.Text
  status           String    @db.Text
  moveInDate       DateTime  @map("move_in_date") @db.Date
  moveOutDate      DateTime? @map("move_out_date") @db.Date
  emergencyContact Json?     @map("emergency_contact") @db.JsonB
  documents        Json[]    @db.JsonB
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  property         Property  @relation(fields: [unitId], references: [id])
  tenant           User      @relation(fields: [email], references: [email])

  @@map("tenants")
  @@schema("public")
}

model MaintenanceRequest {
  id          String    @id @default(uuid())
  propertyId  String    @db.Uuid
  title       String
  description String
  status      String    @default("PENDING")
  priority    String    @default("MEDIUM")
  property    Property  @relation(fields: [propertyId], references: [id])
  requesterId String
  requester   User      @relation(fields: [requesterId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@schema("public")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  company   String?
  createdAt DateTime @default(now())

  @@schema("public")
}

model OrganizationMember {
  id             String       @id @default(uuid()) // Change to uuid
  userId         String
  organizationId String
  role          String       @default("TENANT")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  permissions    Permission[]

  @@unique([userId, organizationId])
  @@index([userId])
  @@schema("public")
}

model Permission {
  id          String   @id @default(uuid()) // Change to uuid
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberId    String
  member      OrganizationMember @relation(fields: [memberId], references: [id])

  @@schema("public")
}
